import requests
import math
import numpy as np
import argparse

parser = argparse.ArgumentParser()

parser.add_argument('-u', '--url',
                    help="use -u/--url for url input, and the word fuzz will be replaced", required=True)
parser.add_argument('-m', '--multi',
                    help="fuzz faster, ain't nobody got time for this", action='store_true')
args = parser.parse_args()

url = args.url
threadCount = 4


def file_len(fname):
    with open(fname) as f:
        for i, l in enumerate(f):
            pass
    return i + 1


def testExistence(content):
    for i in content:
        r = requests.get(url.replace("fuzz", i))
        if r.status_code == 200:
            print(url.replace("fuzz", i) + " is a real boy")


def split_file(file_name):
    with open(fuzz_dict) as f:
        content = f.readlines()

    len_objects = len(content)
    stuff = [x.strip() for x in content]

    if len_objects % threadCount == 0:
        subCount = (int(math.ceil(len_objects / threadCount)))
        chunks = [stuff[x:x + subCount] for x in range(0, len_objects, subCount)]
        return chunks
    else:
        subCount = (int(math.ceil(len_objects / threadCount))) + (len_objects % threadCount)
        chunks = [stuff[x:x + subCount] for x in range(0, len_objects, subCount)]
        return chunks


fuzz_dict = "/Users/Nicolas/Desktop/pythonForPenTesting/Day3/homework/foo.txt"

with open(fuzz_dict) as f:
    content = f.readlines()

objectCount = len(content)
content = [x.strip() for x in content]
objectCount = len(content)

if args.multi:
    print("It's not ready yet!")
else:
    testExistence(content)
